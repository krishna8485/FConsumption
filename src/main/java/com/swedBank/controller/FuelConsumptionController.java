package com.swedBank.controller;

import com.swedBank.business.ConsumptionBusiness;
import com.swedBank.exception.ApplicationBusinessException;
import com.swedBank.exception.BadRequestException;
import com.swedBank.exception.NotFoundException;
import com.swedBank.model.RegistrationRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
@RestController
@Api(value="FuelConsumption Controller", description="Fuel Consumpation registration and report generation")
public class FuelConsumptionController {

    @Autowired
    ConsumptionBusiness consumptionBusinessImpl;

    private static final Logger logger = LogManager.getLogger(FuelConsumptionController.class);


    /**
     *
     * @param registration
     * @return
     * @throws BadRequestException 
     * @throws NotFoundException 
     */
    @ApiOperation(value="Registration", response=String.class )
    @ApiResponses(value={@ApiResponse(code =201, message="Created Successfully"),
                        @ApiResponse(code =500, message="Internal server Error")
    })
    @RequestMapping(value = "/registration", method = RequestMethod.POST)
    public ResponseEntity<String> registration(@RequestBody RegistrationRequest registrationRequest ) throws NotFoundException, BadRequestException {
       logger.info("registration"+ registrationRequest.toString());
       consumptionBusinessImpl.registration(registrationRequest);
       return new ResponseEntity<>("Succesfully Added", HttpStatus.CREATED);
    }
    
    /**
    *
    * @param driverId
    * @return
    */
   @ApiOperation(value="Total spent amount of money grouped by month", response=String.class )
   @ApiResponses(value={@ApiResponse(code =201, message="Created Successfully"),
                       @ApiResponse(code =500, message="Internal server Error"),
                       @ApiResponse(code =400, message="Input validations failed")
   })
   @RequestMapping(value = "/getAmountByMonth", method = RequestMethod.GET)
   public ResponseEntity<String> getAmountByMonth(@RequestBody String driverId ) 
		   throws NotFoundException{
      logger.info("driverId"+ driverId);
      consumptionBusinessImpl.getAmountByMonth(driverId);
      return new ResponseEntity<>("Succesfully Added", HttpStatus.CREATED);
   }
   
   /**
   *
   * @param driverId, month
   * @return
 * @throws NotFoundException 
   */
  @ApiOperation(value="List fuel consumption records for specified month "
  		+ "(each row should contain: fuel type, volume, date, price, total price, driver ID)", response=String.class )
  @ApiResponses(value={@ApiResponse(code =201, message="Created Successfully"),
                      @ApiResponse(code =500, message="Internal server Error")
  })
  @RequestMapping(value = "/getConsumptionByMonth", method = RequestMethod.POST)
  public ResponseEntity<String> getConsumptionByMonth(@RequestBody String month ) throws NotFoundException {
     logger.info("driverId"+ month);
     consumptionBusinessImpl.findConsumpationByMonth(month);
     return new ResponseEntity<>("Succesfully Added", HttpStatus.CREATED);
  }
  
  
  @ApiOperation(value="List fuel consumption records for specified month "
	  		+ "(each row should contain: fuel type, volume, date, price, total price, driver ID)", response=String.class )
	  @ApiResponses(value={@ApiResponse(code =201, message="Created Successfully"),
	                      @ApiResponse(code =500, message="Internal server Error")
	  })
	  @RequestMapping(value = "/bulkRegistrationUpload", method = RequestMethod.POST)
  public ResponseEntity<?> uploadFile(
          @RequestParam("file") MultipartFile uploadfile) throws NotFoundException, BadRequestException {

      logger.debug("Single file upload!");

      if (uploadfile.isEmpty()) {
          return new ResponseEntity("please select a file!", HttpStatus.OK);
      }

      try {

    	  buildRegistrationRequest(Arrays.asList(uploadfile));

      } catch (IOException e) {
          return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
      }

      return new ResponseEntity<>("Succesfully Added", HttpStatus.CREATED);

  }
  
  //save file
  private void buildRegistrationRequest(List<MultipartFile> files) throws IOException, NotFoundException, BadRequestException {
	  String UPLOADED_FOLDER = "./";
	  List<RegistrationRequest> registrationBlukRequest = new ArrayList<RegistrationRequest>();
      for (MultipartFile file : files) {

          if (file.isEmpty()) {
              continue; //next pls
          }
          file.getInputStream();
          BufferedReader br = new BufferedReader(new InputStreamReader(file.getInputStream()));
       // Read CSV header
          br.readLine();
          String line = "";
          
       			// Read customer data line by line
       			while ((line = br.readLine()) != null) {
       				String[] tokens = line.split(",");
       				if (tokens.length > 4) {
       					System.out.println(tokens.toString());
       					RegistrationRequest registrationRequest = new RegistrationRequest(
       							tokens[0], 
       							Double.parseDouble(tokens[1]),
       							Double.parseDouble(tokens[2]), 
       							tokens[3],
       							Integer.parseInt(tokens[4]));
       					
       					registrationBlukRequest.add(registrationRequest);
       				}
       			}
      }
      consumptionBusinessImpl.blukRegistration(registrationBlukRequest);

  }
}